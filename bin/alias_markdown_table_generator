#!/usr/bin/env ruby

# The output of this script can be inserted at the end of the "Usage" section of README.md.
#
# This script generates a markdown file containing all the English aliases in English.rb, in the forms:
#
# | Alias                    | Built-In |
# | ------------------------ | :------: |
# | `$ARGV`                  | `` $* `` |
# | `$CHILD_STATUS`          | `` $? `` |
#
#  and:
#
# | Built-In | Alias                    |
# | :------: | ------------------------ |
# | `` $* `` | `$ARGV`                  |
# | `` $? `` | `$CHILD_STATUS`          |
#
# Some of the formatting done here is not necessary, but is done to make the generated markdown more readable.

require 'stringio'

# Parses the English.rb file for aliases into an array of alias/builtin tuples.
class FileParser
  ALIAS_SOURCE_FILESPEC = File.join(__dir__, '../lib/English.rb')

  def self.parse(code_text_lines=File.readlines(ALIAS_SOURCE_FILESPEC))
    code_text_lines.grep(/^\s*alias\s+(\S+)\s+(\S+)/) {["`#$1`", "`` #$2 ``"]}
  end
end


class MarkdownTableGenerator
  # Returns a string containing a markdown table of the aliases, with headings "Alias" and "Built-In".
  # @param [Array] tuples array of alias/builtin tuples
  # @param [Boolean] builtin_to_alias true if builtin to alias, false if alias to builtin
  def self.generate(tuples, builtin_to_alias=true)

    col1_label, col2_label = 'Alias', 'Builtin'
    col1_length = [tuples.map { |(a, _b)| a.length }.max, col1_label.length].max
    col2_length = [tuples.map { |(_a, b)| b.length }.max, col2_label.length].max

    col1_heading_line = ('-' * col1_length)
    col2_heading_line = ":#{'-' * (col2_length - 2)}:"

    if builtin_to_alias
      tuples = tuples.map(&:reverse)
      col1_label, col2_label = col2_label, col1_label
      col1_length, col2_length = col2_length, col1_length
      col1_heading_line, col2_heading_line = col2_heading_line, col1_heading_line
      format_line = ->(item1, item2) do
        "| #{item1.center(col1_length)} | #{item2.ljust(col2_length)} |"
      end
    else
      format_line = ->(item1, item2) do
        "| #{item1.ljust(col1_length)} | #{item2.center(col2_length)} |"
      end
    end

    # Sort by the first column, whatever that is.
    tuples.sort!

    markdown_string = StringIO.new
    markdown_string << format_line.call(col1_label, col2_label) << "\n"
    markdown_string << format_line.call(col1_heading_line, col2_heading_line) << "\n"
    tuples.each do |(item1, item2)|
      markdown_string << format_line.call(item1, item2) << "\n"
    end
    markdown_string.string
  end
end

if __FILE__ == $0
  alias_tuples = FileParser.parse
  replace = !ARGV.empty?
  if replace
    ARGF.inplace_mode = "~"
    ARGF.each do |line|
      break if /^### Builtin to Alias Table/ =~ line
      puts line
    end
  end
  puts <<~OUTPUT
    ### Builtin to Alias Table

    #{MarkdownTableGenerator.generate(alias_tuples, true)}

    ### Alias to Builtin Table

    #{MarkdownTableGenerator.generate(alias_tuples, false)}
  OUTPUT
  if replace
    puts
    ARGF.each do |line|
      if replace
        case line
        when /^##?\s/, /^### (?!Alias to Builtin Table)/
          replace = false
        else
          next
        end
      end
      puts line
    end
  end
end
